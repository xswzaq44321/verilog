module frog(
	input[3:0] pad_row,
	input[3:0] pad_col,
	input clock,
	input reset,
	output reg [7:0] row,
	output reg [7:0] col
);
reg[7:0] obsticles[7:0];
reg[3:0] frogindex;
reg up, down;
integer i, j;


always
begin
	row = 8'b11111111;
	for(i=0; i<8; i=i+1)
	begin
		for(j=0; j<8; j=j+1)
		begin
			if(obsticles[j][i] == 1)
			begin
				row[i] = 0;
				col[j] = 1;
			end
			else
			begin
				row[i] = 1;
				col[j] = 0;
			end
		end
	end
	/*col[4] = 1;
	row[frogindex] = 0;*/
end
always@(pad_row or pad_col)
begin
	if(pad_row[2] && pad_col[3])
	begin
		up = 1;
	end
	else
	begin
		up = 0;
	end
	if(pad_row[3] && pad_col[3])
	begin
		down = 1;
	end
	else
	begin
		down = 0;
	end
end
/*always@(posedge up or posedge down or posedge reset)
begin
	if(!reset)
	begin
		frogindex = 0;
	end
	if(up)
	begin
		frogindex = frogindex + 1;
		if(frogindex == 8)
		begin
			frogindex = 7;
		end
	end
	if(down)
	begin
		frogindex = frogindex - 1;
		if(frogindex == -1)
		begin
			frogindex = 0;
		end
	end
end*/

endmodule

`define TimeExpire 32'd50000000

module river(clk,reset,out_row,out_col);

input clk,reset;
output[7:0]out_row,out_col;//dot matrix
reg [31:0]count,count2;
reg [3:0]control;
reg[7:0]out_row, out_col;
reg[2:0]button;


//reg [7:0] col1,col2,col3,col4,col5,col6,col0,col7;

always@(posedge clk)
begin
	if(!reset)
	begin
		count <= 32'd0;
		control <= 0;
	end
	else
	begin
		if(count == `TimeExpire)
		begin
			count<=32'd0;
			control <= control + 1;
			if(control == 5)
				control <= 0;
		end
		else
		begin
			count <= count + 32'd1;
		end
		
	end

end

always@(posedge clk)
begin
	if(count2 == 32'd50000)
	begin
	count2 = 32'd0;
	out_row <= 8'b10010101
		case (control)
			4'd0:
			begin
				out_col <= 8'b01111100;
				if(button == 3'd3 || button == 3'd5)
				begin
				//print dead
				end
				else
				begin
				end
			end
			4'd1:
			begin
				out_col <= 8'b00111110
			end
			4'd2:
			begin
				out_col <= 8'b00011111;
			end
			4'd3:
			begin
				out_col <= 8'b11001111;
			end
			4'd4:
			begin
				out_col <= 8'b11000111;
			end

		endcase
	end
	else
		count2 <= count2 + 32'd1;	
end
endmodule
